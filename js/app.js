// Generated by CoffeeScript 1.3.3
(function() {
  var MapView, d3View, pyramid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  d3View = (function(_super) {
    var height, width;

    __extends(d3View, _super);

    function d3View() {
      return d3View.__super__.constructor.apply(this, arguments);
    }

    d3View.prototype.margin = {
      top: 10,
      bottom: 10,
      left: 10,
      right: 10
    };

    width = function(w) {
      if (!w) {
        return this.$el.width();
      }
      this.$el.width(w);
      return this;
    };

    height = function(h) {
      if (!h) {
        return this.$el.height();
      }
      this.$el.height(h);
      return this;
    };

    return d3View;

  })(Backbone.View);

  MapView = (function(_super) {

    __extends(MapView, _super);

    function MapView() {
      return MapView.__super__.constructor.apply(this, arguments);
    }

    MapView.prototype.parent = null;

    MapView.prototype.svg = null;

    MapView.prototype.initialize = function(parent) {
      if (parent == null) {
        parent = "body";
      }
      MapView.__super__.initialize.call(this, parent);
      this.svg = d3.select(parent).append("svg");
      this.setElement(this.svg.node());
      return this.svg.append("g").attr("class", "regions Blues");
    };

    MapView.prototype.resize = function(w, h) {
      if (w == null) {
        w = this.$el.width();
      }
      if (h == null) {
        h = this.$el.height();
      }
      return this.svg.attr("width", w).attr("height", h);
    };

    MapView.prototype.render = function(features, dat) {
      var regions;
      if (!features) {
        return this;
      }
      regions = this.svg.select("g.regions");
      regions.selectAll("path").data(features).enter().append("path").attr("class", dat ? quantize : null).attr("d", path).attr("title", function(d) {
        return d.properties.name;
      });
      return this;
    };

    return MapView;

  })(d3View);

  this.MapView = MapView;

  /* Population pyramid
  */


  pyramid = function() {
    var height, margin, rescale, width, xScale, yScale;
    width = 800;
    height = 600;
    margin = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    };
    xScale = d3.scale.linear();
    yScale = d3.scale.linear();
    pyramid = function(selection) {
      rescale();
      return selection.each(function(d, i) {
        var bars, g;
        g = d3.select(this);
        bars = g.selectAll("rect.bar").data(d);
        bars.enter().append("rect").attr("class", "bar").attr("width", function(d) {
          return xScale(d.count);
        }).attr("y", function(d) {
          return yScale(d.ageGroup);
        }).attr("height", function(_, i) {
          return "" + i + "%";
        });
      });
    };
    rescale = function() {
      xScale.range([margin.left, width - margin.right]);
      yScale.range([height - margin.bottom, margin.top]);
      return pyramid;
    };
    pyramid.width = function(_) {
      if (_) {
        width = _;
        return pyramid;
      } else {
        return width;
      }
    };
    pyramid.height = function(_) {
      if (_) {
        height = _;
        return pyramid;
      } else {
        return height;
      }
    };
    pyramid.margin = function(_) {
      if (_) {
        margin = _;
        return pyramid;
      } else {
        return margin;
      }
    };
    return pyramid;
  };

}).call(this);
